// <auto-generated />
using System;
using Quality.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Quality.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241122102757_v1.0.2")]
    partial class v102
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.ERPSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code1Name")
                        .HasColumnType("text");

                    b.Property<string>("Code2Name")
                        .HasColumnType("text");

                    b.Property<string>("Code3Name")
                        .HasColumnType("text");

                    b.Property<string>("Company1Db")
                        .HasColumnType("text");

                    b.Property<string>("Company2Db")
                        .HasColumnType("text");

                    b.Property<string>("Company3Db")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ERPDbPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ERPDbUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ERPUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ERPUserPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ERPSettings");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.GroupInRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("GroupInRoles");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.Localization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DE")
                        .HasColumnType("text");

                    b.Property<string>("EN")
                        .HasColumnType("text");

                    b.Property<string>("ES")
                        .HasColumnType("text");

                    b.Property<string>("FR")
                        .HasColumnType("text");

                    b.Property<string>("IT")
                        .HasColumnType("text");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RU")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("TR")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Keyword")
                        .IsUnique();

                    b.ToTable("Localizations");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.NotificationToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("NotificationTokens");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PhotoTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PhotoTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.PhotoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PhotoTypes");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductModels.ProductHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("BoxGrossWeight_New")
                        .HasColumnType("double precision");

                    b.Property<double?>("BoxGrossWeight_Old")
                        .HasColumnType("double precision");

                    b.Property<double?>("BoxNetWeight_New")
                        .HasColumnType("double precision");

                    b.Property<double?>("BoxNetWeight_Old")
                        .HasColumnType("double precision");

                    b.Property<int?>("BoxQtyAt100x120Pallet_New")
                        .HasColumnType("integer");

                    b.Property<int?>("BoxQtyAt100x120Pallet_Old")
                        .HasColumnType("integer");

                    b.Property<int?>("BoxQtyAt80x120Pallet_New")
                        .HasColumnType("integer");

                    b.Property<int?>("BoxQtyAt80x120Pallet_Old")
                        .HasColumnType("integer");

                    b.Property<double?>("BoxStrainedWeight_New")
                        .HasColumnType("double precision");

                    b.Property<double?>("BoxStrainedWeight_Old")
                        .HasColumnType("double precision");

                    b.Property<int?>("BrandId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("BrandId_Old")
                        .HasColumnType("integer");

                    b.Property<int?>("BudgetGroupId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("BudgetGroupId_Old")
                        .HasColumnType("integer");

                    b.Property<string>("Code2_New")
                        .HasColumnType("text");

                    b.Property<string>("Code2_Old")
                        .HasColumnType("text");

                    b.Property<string>("Code3_New")
                        .HasColumnType("text");

                    b.Property<string>("Code3_Old")
                        .HasColumnType("text");

                    b.Property<string>("Code_New")
                        .HasColumnType("text");

                    b.Property<string>("Code_Old")
                        .HasColumnType("text");

                    b.Property<int?>("ColorTypeId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("ColorTypeId_Old")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CuttingTypeId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("CuttingTypeId_Old")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ERP1UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ERP2UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ERP3UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExpireDate_New")
                        .HasColumnType("text");

                    b.Property<string>("ExpireDate_Old")
                        .HasColumnType("text");

                    b.Property<string>("FlowChartFileId_New")
                        .HasColumnType("text");

                    b.Property<string>("FlowChartFileId_Old")
                        .HasColumnType("text");

                    b.Property<string>("HACCPFileId_New")
                        .HasColumnType("text");

                    b.Property<string>("HACCPFileId_Old")
                        .HasColumnType("text");

                    b.Property<string>("HSCode_New")
                        .HasColumnType("text");

                    b.Property<string>("HSCode_Old")
                        .HasColumnType("text");

                    b.Property<int?>("HeightOf100x120Pallet_New")
                        .HasColumnType("integer");

                    b.Property<int?>("HeightOf100x120Pallet_Old")
                        .HasColumnType("integer");

                    b.Property<int?>("HeightOf80x120Pallet_New")
                        .HasColumnType("integer");

                    b.Property<int?>("HeightOf80x120Pallet_Old")
                        .HasColumnType("integer");

                    b.Property<bool>("IsERP1Updated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsERP2Updated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsERP3Updated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrganic_New")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOrganic_Old")
                        .HasColumnType("boolean");

                    b.Property<string>("LabelForm_New")
                        .HasColumnType("text");

                    b.Property<string>("LabelForm_Old")
                        .HasColumnType("text");

                    b.Property<double?>("LabourCostRate_New")
                        .HasColumnType("double precision");

                    b.Property<double?>("LabourCostRate_Old")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("LastUpdateTryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("MaterialCostRate_New")
                        .HasColumnType("double precision");

                    b.Property<double?>("MaterialCostRate_Old")
                        .HasColumnType("double precision");

                    b.Property<string>("Name2_New")
                        .HasColumnType("text");

                    b.Property<string>("Name2_Old")
                        .HasColumnType("text");

                    b.Property<string>("Name_New")
                        .HasColumnType("text");

                    b.Property<string>("Name_Old")
                        .HasColumnType("text");

                    b.Property<string>("NormFile_New")
                        .HasColumnType("text");

                    b.Property<string>("NormFile_Old")
                        .HasColumnType("text");

                    b.Property<int?>("PackagingId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("PackagingId_Old")
                        .HasColumnType("integer");

                    b.Property<string>("PrintedLabel_New")
                        .HasColumnType("text");

                    b.Property<string>("PrintedLabel_Old")
                        .HasColumnType("text");

                    b.Property<int?>("ProductGroupId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductGroupId_Old")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductStatusId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductStatusId_Old")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductionPlaceId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductionPlaceId_Old")
                        .HasColumnType("integer");

                    b.Property<double?>("QtyInBox_New")
                        .HasColumnType("double precision");

                    b.Property<double?>("QtyInBox_Old")
                        .HasColumnType("double precision");

                    b.Property<int?>("QualityTypeId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("QualityTypeId_Old")
                        .HasColumnType("integer");

                    b.Property<int?>("RawMaterialGroupId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("RawMaterialGroupId_Old")
                        .HasColumnType("integer");

                    b.Property<int?>("SalesBasedId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("SalesBasedId_Old")
                        .HasColumnType("integer");

                    b.Property<int?>("SalesGroupId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("SalesGroupId_Old")
                        .HasColumnType("integer");

                    b.Property<int?>("SellerId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("SellerId_Old")
                        .HasColumnType("integer");

                    b.Property<int?>("SemiProductGroupId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("SemiProductGroupId_Old")
                        .HasColumnType("integer");

                    b.Property<string>("SpecCode_New")
                        .HasColumnType("text");

                    b.Property<string>("SpecCode_Old")
                        .HasColumnType("text");

                    b.Property<string>("SpecificationFileId_New")
                        .HasColumnType("text");

                    b.Property<string>("SpecificationFileId_Old")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int?>("StorageConditionId_New")
                        .HasColumnType("integer");

                    b.Property<int?>("StorageConditionId_Old")
                        .HasColumnType("integer");

                    b.Property<double?>("UnitGrossWeight_New")
                        .HasColumnType("double precision");

                    b.Property<double?>("UnitGrossWeight_Old")
                        .HasColumnType("double precision");

                    b.Property<double?>("UnitNetWeight_New")
                        .HasColumnType("double precision");

                    b.Property<double?>("UnitNetWeight_Old")
                        .HasColumnType("double precision");

                    b.Property<double?>("UnitStrainedWeight_New")
                        .HasColumnType("double precision");

                    b.Property<double?>("UnitStrainedWeight_Old")
                        .HasColumnType("double precision");

                    b.Property<string>("Unit_New")
                        .HasColumnType("text");

                    b.Property<string>("Unit_Old")
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId_New");

                    b.HasIndex("BudgetGroupId_New");

                    b.HasIndex("ColorTypeId_New");

                    b.HasIndex("CuttingTypeId_New");

                    b.HasIndex("PackagingId_New");

                    b.HasIndex("ProductGroupId_New");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductStatusId_New");

                    b.HasIndex("ProductionPlaceId_New");

                    b.HasIndex("QualityTypeId_New");

                    b.HasIndex("RawMaterialGroupId_New");

                    b.HasIndex("SalesBasedId_New");

                    b.HasIndex("SalesGroupId_New");

                    b.HasIndex("SellerId_New");

                    b.HasIndex("SemiProductGroupId_New");

                    b.HasIndex("StorageConditionId_New");

                    b.ToTable("ProductHistories");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BBDTracking")
                        .HasColumnType("boolean");

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int?>("BudgetGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int?>("ColorTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("CriticalStockAmount")
                        .HasColumnType("double precision");

                    b.Property<int?>("CuttingTypeId")
                        .HasColumnType("integer");

                    b.Property<double?>("Density")
                        .HasColumnType("double precision");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSettedProduct")
                        .HasColumnType("boolean");

                    b.Property<double?>("Length")
                        .HasColumnType("double precision");

                    b.Property<bool?>("LotTracking")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxStack")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PackagingId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductionPlaceId")
                        .HasColumnType("integer");

                    b.Property<int?>("QualityTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("SKUFollowTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("SKUFollowUnitId")
                        .HasColumnType("integer");

                    b.Property<int?>("SalesBasedId")
                        .HasColumnType("integer");

                    b.Property<int?>("SalesGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("SellerId")
                        .HasColumnType("integer");

                    b.Property<int?>("SemiProductGroupId")
                        .HasColumnType("integer");

                    b.Property<double?>("ShelflifeLimit")
                        .HasColumnType("double precision");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool?>("StockTracking")
                        .HasColumnType("boolean");

                    b.Property<int?>("StorageConditionId")
                        .HasColumnType("integer");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Volume")
                        .HasColumnType("double precision");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.Property<double?>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("BudgetGroupId");

                    b.HasIndex("ColorTypeId");

                    b.HasIndex("CuttingTypeId");

                    b.HasIndex("PackagingId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("ProductStatusId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("ProductionPlaceId");

                    b.HasIndex("QualityTypeId");

                    b.HasIndex("SKUFollowTypeId");

                    b.HasIndex("SKUFollowUnitId");

                    b.HasIndex("SalesBasedId");

                    b.HasIndex("SalesGroupId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SemiProductGroupId");

                    b.HasIndex("StorageConditionId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.BudgetGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BudgetGroups");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ColorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ColorTypes");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.CuttingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CuttingTypes");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Norm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Norms");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.NormDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NormId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormId");

                    b.ToTable("NormDetails");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Packaging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Packagings");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductGroupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProductGroupTypes");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductGroupTypeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("ProductGroupTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupTypeId");

                    b.ToTable("ProductGroupTypeDefinitions");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProductStatuses");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductToProductGroupTypeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductGroupTypeDefinitionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductGroupTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupTypeDefinitionId");

                    b.HasIndex("ProductGroupTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductToProductGroupTypeDefinitions");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductionPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProductionPlaces");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.QualityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("QualityTypes");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.RawMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Code2")
                        .HasColumnType("text");

                    b.Property<string>("Code3")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RawMaterialGroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RawMaterialGroupId");

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.RawMaterialGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("RawMaterialGroups");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("SemiProductId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SemiProductId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.RecipeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("AuxMaterialCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PackageCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RawMaterialId")
                        .HasColumnType("integer");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<int?>("SemiProductId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RawMaterialId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("SemiProductId");

                    b.ToTable("RecipeDetails");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SKUFollowType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SKUFollowTypes");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SKUFollowUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SKUFollowUnits");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SalesBased", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SalesBaseds");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SalesGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SalesGroups");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Seller");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SemiProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Code2")
                        .HasColumnType("text");

                    b.Property<string>("Code3")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("OldCode")
                        .HasColumnType("text");

                    b.Property<int?>("SemiProductGroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SemiProductGroupId");

                    b.ToTable("SemiProducts");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SemiProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SemiProductGroups");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Spec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Specs");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SpecDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SpecId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SpecId");

                    b.ToTable("SpecDetails");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.StorageCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("StorageConditions");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductToCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductToCustomers");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.GroupInRole", b =>
                {
                    b.HasOne("Quality.Core.Models.BaseModels.DefinitionModels.Group", "Group")
                        .WithMany("GroupInRoles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quality.Core.Models.BaseModels.DefinitionModels.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.Photo", b =>
                {
                    b.HasOne("Quality.Core.Models.BaseModels.DefinitionModels.PhotoType", null)
                        .WithMany("Photo")
                        .HasForeignKey("PhotoTypeId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId");

                    b.HasOne("Quality.Core.Models.BaseModels.DefinitionModels.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.User", b =>
                {
                    b.HasOne("Quality.Core.Models.BaseModels.DefinitionModels.Group", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductModels.ProductHistory", b =>
                {
                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.BudgetGroup", "BudgetGroup")
                        .WithMany()
                        .HasForeignKey("BudgetGroupId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ColorType", "ColorType")
                        .WithMany()
                        .HasForeignKey("ColorTypeId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.CuttingType", "CuttingType")
                        .WithMany()
                        .HasForeignKey("CuttingTypeId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Packaging", "Packaging")
                        .WithMany()
                        .HasForeignKey("PackagingId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductStatus", "ProductStatus")
                        .WithMany()
                        .HasForeignKey("ProductStatusId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductionPlace", "ProductionPlace")
                        .WithMany()
                        .HasForeignKey("ProductionPlaceId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.QualityType", "QualityType")
                        .WithMany()
                        .HasForeignKey("QualityTypeId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.RawMaterialGroup", "RawMaterialGroup")
                        .WithMany()
                        .HasForeignKey("RawMaterialGroupId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SalesBased", "SalesBased")
                        .WithMany()
                        .HasForeignKey("SalesBasedId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SalesGroup", "SalesGroup")
                        .WithMany()
                        .HasForeignKey("SalesGroupId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SemiProductGroup", "SemiProductGroup")
                        .WithMany()
                        .HasForeignKey("SemiProductGroupId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.StorageCondition", "StorageCondition")
                        .WithMany()
                        .HasForeignKey("StorageConditionId_New")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Brand");

                    b.Navigation("BudgetGroup");

                    b.Navigation("ColorType");

                    b.Navigation("CuttingType");

                    b.Navigation("Packaging");

                    b.Navigation("Product");

                    b.Navigation("ProductGroup");

                    b.Navigation("ProductStatus");

                    b.Navigation("ProductionPlace");

                    b.Navigation("QualityType");

                    b.Navigation("RawMaterialGroup");

                    b.Navigation("SalesBased");

                    b.Navigation("SalesGroup");

                    b.Navigation("Seller");

                    b.Navigation("SemiProductGroup");

                    b.Navigation("StorageCondition");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.Product", b =>
                {
                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.BudgetGroup", null)
                        .WithMany("Products")
                        .HasForeignKey("BudgetGroupId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ColorType", null)
                        .WithMany("Products")
                        .HasForeignKey("ColorTypeId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.CuttingType", null)
                        .WithMany("Products")
                        .HasForeignKey("CuttingTypeId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Packaging", null)
                        .WithMany("Products")
                        .HasForeignKey("PackagingId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductStatus", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductStatusId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductionPlace", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductionPlaceId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.QualityType", null)
                        .WithMany("Products")
                        .HasForeignKey("QualityTypeId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SKUFollowType", "SKUFollowType")
                        .WithMany("Products")
                        .HasForeignKey("SKUFollowTypeId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SKUFollowUnit", "SKUFollowUnit")
                        .WithMany("Products")
                        .HasForeignKey("SKUFollowUnitId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SalesBased", null)
                        .WithMany("Products")
                        .HasForeignKey("SalesBasedId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SalesGroup", null)
                        .WithMany("Products")
                        .HasForeignKey("SalesGroupId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Seller", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SemiProductGroup", null)
                        .WithMany("Products")
                        .HasForeignKey("SemiProductGroupId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.StorageCondition", "StorageCondition")
                        .WithMany("Products")
                        .HasForeignKey("StorageConditionId");

                    b.Navigation("Brand");

                    b.Navigation("ProductGroup");

                    b.Navigation("ProductType");

                    b.Navigation("SKUFollowType");

                    b.Navigation("SKUFollowUnit");

                    b.Navigation("Seller");

                    b.Navigation("StorageCondition");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Norm", b =>
                {
                    b.HasOne("Quality.Core.Models.ProductPortalModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.NormDetail", b =>
                {
                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Norm", "Norm")
                        .WithMany("NormDetails")
                        .HasForeignKey("NormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Norm");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductGroupTypeDefinition", b =>
                {
                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductGroupType", "ProductGroupType")
                        .WithMany("ProductGroupTypeDefinitions")
                        .HasForeignKey("ProductGroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductGroupType");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductToProductGroupTypeDefinition", b =>
                {
                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductGroupTypeDefinition", "ProductGroupTypeDefinition")
                        .WithMany("ProductToProductGroupTypeDefinitions")
                        .HasForeignKey("ProductGroupTypeDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductGroupType", "ProductGroupType")
                        .WithMany("ProductToProductGroupTypeDefinitions")
                        .HasForeignKey("ProductGroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quality.Core.Models.ProductPortalModels.Product", "Product")
                        .WithMany("ProductToProductGroupTypeDefinitions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductGroupType");

                    b.Navigation("ProductGroupTypeDefinition");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.RawMaterial", b =>
                {
                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.RawMaterialGroup", "RawMaterialGroup")
                        .WithMany("RawMaterials")
                        .HasForeignKey("RawMaterialGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterialGroup");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Recipe", b =>
                {
                    b.HasOne("Quality.Core.Models.ProductPortalModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SemiProduct", "SemiProduct")
                        .WithMany("Recipes")
                        .HasForeignKey("SemiProductId");

                    b.Navigation("Product");

                    b.Navigation("SemiProduct");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.RecipeDetail", b =>
                {
                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.RawMaterial", "RawMaterial")
                        .WithMany()
                        .HasForeignKey("RawMaterialId");

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Recipe", "Recipe")
                        .WithMany("RecipeDetails")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SemiProduct", "SemiProduct")
                        .WithMany("RecipeDetails")
                        .HasForeignKey("SemiProductId");

                    b.Navigation("RawMaterial");

                    b.Navigation("Recipe");

                    b.Navigation("SemiProduct");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SemiProduct", b =>
                {
                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SemiProductGroup", null)
                        .WithMany("SemiProducts")
                        .HasForeignKey("SemiProductGroupId");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Spec", b =>
                {
                    b.HasOne("Quality.Core.Models.ProductPortalModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SpecDetail", b =>
                {
                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Spec", "Spec")
                        .WithMany("SpecDetails")
                        .HasForeignKey("SpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spec");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductToCustomer", b =>
                {
                    b.HasOne("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quality.Core.Models.ProductPortalModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.Group", b =>
                {
                    b.Navigation("GroupInRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.PhotoType", b =>
                {
                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Quality.Core.Models.BaseModels.DefinitionModels.User", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.Product", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("ProductToProductGroupTypeDefinitions");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.BudgetGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ColorType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.CuttingType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Norm", b =>
                {
                    b.Navigation("NormDetails");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Packaging", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductGroupType", b =>
                {
                    b.Navigation("ProductGroupTypeDefinitions");

                    b.Navigation("ProductToProductGroupTypeDefinitions");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductGroupTypeDefinition", b =>
                {
                    b.Navigation("ProductToProductGroupTypeDefinitions");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductStatus", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.ProductionPlace", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.QualityType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.RawMaterialGroup", b =>
                {
                    b.Navigation("RawMaterials");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Recipe", b =>
                {
                    b.Navigation("RecipeDetails");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SKUFollowType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SKUFollowUnit", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SalesBased", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SalesGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Seller", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SemiProduct", b =>
                {
                    b.Navigation("RecipeDetails");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.SemiProductGroup", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SemiProducts");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.Spec", b =>
                {
                    b.Navigation("SpecDetails");
                });

            modelBuilder.Entity("Quality.Core.Models.ProductPortalModels.ProductPortalDefinitionModels.StorageCondition", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
